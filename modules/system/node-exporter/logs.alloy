declare "journal" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "matches" {
    comment = "Journal matches to filter. The + character is not supported, only logical AND matches will be added."
    optional = true
  }

  loki.source.journal "scrape" {
    max_age       = "24h0m0s"
    relabel_rules = discovery.relabel.journal.rules
    forward_to    = argument.forward_to.value
    matches       = coelsce(argument.matches.value, "")
  }

  discovery.relabel "journal" {
    targets = []

    rule {
      source_labels = ["__journal__systemd_unit"]
      target_label  = "unit"
    }

    rule {
      source_labels = ["__journal__boot_id"]
      target_label  = "boot_id"
    }

    rule {
      source_labels = ["__journal__transport"]
      target_label  = "transport"
    }

    rule {
      source_labels = ["__journal_priority_keyword"]
      target_label  = "level"
    }
  }
}

declare "file_logs"{
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "path" {
    comment = "Path of the log files to scrape"
    optional = true
  }

  local.file_match "scrape" {
    path_targets = [{
      __address__ = "localhost",
      __path__    = coalesce(argument.path.value,"/var/log/{syslog,messages,*.log}"),
      instance    = constants.hostname,
      job         = "integrations/node_exporter",
    }]
  }

  loki.source.file "scrape" {
    targets    = local.file_match.scrape.targets
    forward_to = argument.forward_to.value
  }
}